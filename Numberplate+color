import cv2
import tkinter as tk
from tkinter import Label, PhotoImage, Button, filedialog, Entry
from PIL import Image, ImageTk
import pytesseract
import numpy as np

# Path to Tesseract OCR executable (change this path based on your installation)
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# Function to process the image
def process_image(image_path):
    # Read the image
    img = cv2.imread(image_path)

    # Convert the image to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Use Haar Cascade for license plate detection
    plate_cascade = cv2.CascadeClassifier(r"C:\Users\91940\Downloads\indian_license_plate.xml")
    plates = plate_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)

    extracted_text = ""
    extracted_colors = []

    for (x, y, w, h) in plates:
        cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)

        # Extract the region of interest (ROI) around the detected number plate
        roi_plate = img[y:y + h, x:x + w]

        # Convert the ROI to grayscale
        roi_gray = cv2.cvtColor(roi_plate, cv2.COLOR_BGR2GRAY)

        # Extract text using OCR from the region of interest (ROI)
        text = pytesseract.image_to_string(roi_gray, config='--psm 8 --oem 3 -c tessedit_char_whitelist=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ')  # Adjust the OCR configuration if needed
        extracted_text += text + "\n"

        # Extract color information from the ROI
        color = get_color_name(roi_plate)
        extracted_colors.append(color)

    return img, extracted_text.strip(), extracted_colors

def get_color_name(image):
    # Calculate the average color in the image
    average_color = np.mean(image, axis=(0, 1)).astype(int)

    # Map RGB values to color names
    if is_red(average_color):
        return "Red"
    elif is_green(average_color):
        return "Green"
    elif is_blue(average_color):
        return "Blue"
    else:
        return "Unknown"

def is_red(color):
    return color[0] > 150 and color[1] < 100 and color[2] < 100

def is_green(color):
    return color[0] < 100 and color[1] > 150 and color[2] < 100

def is_blue(color):
    return color[0] < 100 and color[1] < 100 and color[2] > 150

# Function to update the Tkinter GUI
def update_gui(image_path):
    processed_image, extracted_text, extracted_colors = process_image(image_path)

    # Display the processed image in the Tkinter window
    image = cv2.cvtColor(processed_image, cv2.COLOR_BGR2RGB)
    image = Image.fromarray(image)
    photo = ImageTk.PhotoImage(image=image)
    img_label.config(image=photo)
    img_label.image = photo

    # Display the extracted text in the entry widget
    text_entry.delete(0, tk.END)
    text_entry.insert(0, extracted_text)

    # Display the extracted color names in the entry widget
    color_entry.delete(0, tk.END)
    color_entry.insert(0, ', '.join(extracted_colors))

# Function to handle image selection using file dialog
def select_image():
    file_path = filedialog.askopenfilename(filetypes=[("Image files", "*.png;*.jpg;*.jpeg")])
    if file_path:
        update_gui(file_path)

# Tkinter setup
root = tk.Tk()
root.title("Car Detection with License Plate, OCR, and Color Detection")

# Image display label
img_label = Label(root)
img_label.pack()

# Detected text entry
text_entry = Entry(root, width=50)
text_entry.pack()

# Detected color entry
color_entry = Entry(root, width=50)
color_entry.pack()

# Upload image button
upload_button = Button(root, text="Upload Image", command=select_image)
upload_button.pack()

# Process each image in the list
root.mainloop()
