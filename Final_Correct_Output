import cv2
import os
import numpy as np
import pytesseract
import imutils
import tensorflow as tf
import pandas as pd


from telegram import Bot
import requests


# Replace 'YOUR_BOT_TOKEN' with the token obtained from BotFather
bot_token = '7195453108:AAHLDhnAxkQXF8Tu8TbpYrU8UluiJS7qNRo'

# Initialize the bot
bot = Bot(token=bot_token)

# Replace 'YOUR_CHAT_ID' with the chat ID of the user or group you want to send the message to
chat_id = '967152460'
# Example usage
# telegram_bot = telepot.Bot('6951999257:AAFzjZd75vY7sc6qm6GkIK9a_2ZIrVZ0ISo')
# chat_id =  967152460
excel_file_path = 'Book.xlsx'


# Path to label map file
PATH_TO_LABELS = os.path.join('labelmap.txt')

# Load the label map
with open(PATH_TO_LABELS, 'r') as f:
    labels = [line.strip() for line in f.readlines()]

if labels[0] == '???':
    del(labels[0])
excel_file_path = 'Book.xlsx'
# Load model
interpreter = tf.lite.Interpreter(model_path="detect.tflite")
interpreter.allocate_tensors()
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# Set Tesseract OCR path
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# Start capturing video
vid_cam = cv2.VideoCapture(0)

# Load number plate detector
detector = cv2.CascadeClassifier('haarcascade_russian_plate_number.xml')

# Function to detect number plates
def detect_number_plates(image_frame):
    gray = cv2.cvtColor(image_frame, cv2.COLOR_BGR2GRAY)
    numplts = detector.detectMultiScale(gray, 1.3, 5)
    return numplts

# Function to extract number plates
def extract_number_plate(image):
    minAR = 4
    maxAR = 5
    debug = True
    keep = 5
    numplts = []

    def debug_imshow(image):
        return
        if debug:
            cv2.imshow("image", image)
            cv2.waitKey()

    image = imutils.resize(image, width=600)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    rectKern = cv2.getStructuringElement(cv2.MORPH_RECT, (13, 5))
    blackhat = cv2.morphologyEx(gray, cv2.MORPH_BLACKHAT, rectKern)
    gradX = cv2.Sobel(blackhat, ddepth=cv2.CV_32F, dx=1, dy=0, ksize=-1)
    gradX = np.absolute(gradX)
    (minVal, maxVal) = (np.min(gradX), np.max(gradX))
    gradX = 255 * ((gradX - minVal) / (maxVal - minVal))
    gradX = gradX.astype("uint8")
    gradX = cv2.GaussianBlur(gradX, (5, 5), 0)
    gradX = cv2.morphologyEx(gradX, cv2.MORPH_CLOSE, rectKern)
    thresh = cv2.threshold(gradX, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)[1]
    thresh = cv2.bitwise_and(thresh, thresh, mask=gray)
    thresh = cv2.dilate(thresh, None, iterations=2)
    thresh = cv2.erode(thresh, None, iterations=1)
    cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    cnts = imutils.grab_contours(cnts)
    cnts = sorted(cnts, key=cv2.contourArea, reverse=True)[:keep]

    for c in cnts:
        (x, y, w, h) = cv2.boundingRect(c)
        bb = (x, y, w, h)
        ar = w / float(h)
        if ar >= minAR and ar <= maxAR:
            lpCnt = c
            licensePlate = gray[y:y + h, x:x + w]
            roi = cv2.threshold(licensePlate, 0, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)[1]
            numplts.append(bb)
            break

    return numplts
def detect_car(image_frame):
    roi=None
    img_org=image_frame
    # prepara input image
    img = cv2.cvtColor(img_org, cv2.COLOR_BGR2RGB)
    img = cv2.resize(img, (300, 300))
    img = img.reshape(1, img.shape[0], img.shape[1], img.shape[2]) # (1, 300, 300, 3)
    img = img.astype(np.uint8)
		
	# set input tensor
    interpreter.set_tensor(input_details[0]['index'], img)

	# run
    interpreter.invoke()

	# get outpu tensor
    boxes = interpreter.get_tensor(output_details[0]['index'])
    classes = interpreter.get_tensor(output_details[1]['index'])
    scores = interpreter.get_tensor(output_details[2]['index'])
	#num = interpreter.get_tensor(output_details[3]['index'])
	
    for i in range(boxes.shape[1]):
    	if scores[0, i] > 0.5:
    		box = boxes[0, i, :]
    		x0 = int(abs(box[1]) * img_org.shape[1])
    		y0 = int(abs(box[0]) * img_org.shape[0])
    		x1 = int(abs(box[3]) * img_org.shape[1])
    		y1 = int(abs(box[2]) * img_org.shape[0])
    		#print(box)
            
    		box = box.astype(np.int)
    		
    		##print(img_org.shape)
    		#print(y0,y1,x0,x1)
    		object_name = labels[int(classes[0, i])]
    		if(object_name=="car"):
			    cv2.rectangle(img_org, (x0, y0), (x1, y1), (255, 0, 0), 2)
			    cv2.rectangle(img_org, (x0, y0), (x0 + 100, y0 - 30), (255, 0, 0), -1)
                
    			#object_name = labels[int(classes[int(labels[0, i])])]
			    cv2.putText(img_org,object_name,(x0, y0),cv2.FONT_HERSHEY_SIMPLEX,1,(255, 255, 255),2)
			    print(object_name)
			    #print(y0,y1,x0,x1)
			    roi=img_org[y0:y1,x0:x1]
			    hsv_roi = cv2.cvtColor(roi, cv2.COLOR_BGR2HSV)
			    roi_height, roi_width = roi.shape[:2]
			    cx = int(roi_width / 2)
			    cy = int(roi_height / 2)

                # Pick pixel value
			    pixel_center = hsv_roi[cy, cx]
			    hue_value = pixel_center[0]
			    saturation = pixel_center[1]
			    value = pixel_center[2]
			    print(hue_value)
			    #print(saturation)
			    color = "Undefined"
			    if value < 50:
			        color= "Black"
			    elif value > 200 and saturation < 30:
			        color= "White"
			    elif saturation < 30:
			        color= "Grey"
			    elif 78 <= hue_value <= 131:
			        color= "Blue"
			   
			     
			    elif hue_value < 5:
			        color = "RED"
			    
			    elif hue_value < 33:
			        color = "YELLOW"
			    elif hue_value < 78:
			        color = "GREEN"
			    elif hue_value < 131:
			        color = "BLUE"
			   
			    else:
			        color = "RED"

			    pixel_center_bgr = roi[cy, cx]
			    b, g, r = int(pixel_center_bgr[0]), int(pixel_center_bgr[1]), int(pixel_center_bgr[2])

			    cv2.rectangle(img_org, (cx - 220, 10), (cx + 200, 120), (255, 255, 255), -1)
			    cv2.putText(img_org, color, (cx - 200, 100), 0, 3, (b, g, r), 5)
			    cv2.circle(img_org, (cx, cy), 5, (25, 25, 25), 3)
# 			    color_dict = {
#                     'red': ([0, 50, 50], [10, 255, 255]),
#                     'blue': ([100, 50, 50], [130, 255, 255]),
#                     'green': ([40, 50, 50], [80, 255, 255]),
#                     'yellow': ([20, 50, 50], [30, 255, 255]),
#                     'black': ([0, 0, 0], [179, 255, 20]),  # Lower bound might need adjustment
#                     'grey': ([0, 0, 20], [179, 255, 70])  # Lower bound might need adjustment
#                 }

# 			    color_counts = {color: 0 for color in color_dict}

# 			    for y in range(hsv_roi.shape[0]):
# 			        for x in range(hsv_roi.shape[1]):
# 			            pixel = hsv_roi[y, x]
# 			            for color, (lower, upper) in color_dict.items():
# 			                if lower[0] <= pixel[0] <= upper[0] and lower[1] <= pixel[1] <= upper[1] and lower[2] <= pixel[2] <= upper[2]:
# 			                    color_counts[color] += 1

# 			    max_color = max(color_counts, key=color_counts.get)
# 			    print(max_color)
#     #return max_color
# Function to perform color recognition
# def recognize_color(car_roi):
#     hsv_roi = cv2.cvtColor(car_roi, cv2.COLOR_BGR2HSV)
#     color_dict = {
#         'red': ([0, 50, 50], [10, 255, 255]),
#         'blue': ([100, 50, 50], [130, 255, 255]),
#         'green': ([40, 50, 50], [80, 255, 255]),
#         'yellow': ([20, 50, 50], [30, 255, 255]),
#         'black': ([0, 0, 0], [179, 255, 20]),  # Lower bound might need adjustment
#         'grey': ([0, 0, 20], [179, 255, 70])  # Lower bound might need adjustment
#     }

#     color_counts = {color: 0 for color in color_dict}

#     for y in range(hsv_roi.shape[0]):
#         for x in range(hsv_roi.shape[1]):
#             pixel = hsv_roi[y, x]
#             for color, (lower, upper) in color_dict.items():
#                 if lower[0] <= pixel[0] <= upper[0] and lower[1] <= pixel[1] <= upper[1] and lower[2] <= pixel[2] <= upper[2]:
#                     color_counts[color] += 1

#     max_color = max(color_counts, key=color_counts.get)
#     cv2.putText(image_frame, f"Color: {max_color}", (x, y - 30), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
#     return max_color
def search_excel_value(file_path, search_value):
    # Read the Excel file into a pandas DataFrame
    df = pd.read_excel(file_path)

    # Check if the second column exists
    if len(df.columns) < 2:
        print("The Excel file should have at least two columns.")
        return

    # Specify the column to search (index 1 represents the second column)
    search_column = df.columns[1]

    # Filter the DataFrame based on the search value in the specified column
    result_df = df[df[search_column] == search_value]

    # Check if any matching rows were found
    if result_df.empty:
        print(f"No matching vehicle in the list")
        message="No matching vehicle found"+search_value
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage?chat_id={chat_id}&text={message}"
        r=requests.get(url)
        print(r.json())
    else:
        # Print the entire matching rows
        print("Matching rows:")
        print(result_df)
        message=result_df
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage?chat_id={chat_id}&text={message}"
        r=requests.get(url)
        print(r.json())
        print("Matching rows:")
        print(result_df)
        # Check if any "no" value is present in the matching rows
        if 'NO' in result_df.values:
            # Print the corresponding column headings
            print("\nColumns with 'no' value:")
            for column in result_df.columns:
                if 'NO' in result_df[column].values:
                    message=f"{column} is expired"
                    print(message)
                    url = f"https://api.telegram.org/bot{bot_token}/sendMessage?chat_id={chat_id}&text={message}"
                    r=requests.get(url)
                    print(r.json())
                    print(f"{column} is expired")
                    #telegram_bot.sendMessage (chat_id,str(f"{column} is expired"))

# Start looping
while True:
    _, image_frame = vid_cam.read()

    # Detect number plates
    numplt = detect_number_plates(image_frame)

    # If no number plates are found, try extracting them
    if len(numplt) == 0:
        numplt = extract_number_plate(image_frame)

    # Loop over detected number plates
    for (x, y, w, h) in numplt:
        cv2.rectangle(image_frame, (x, y), (x + w, y + h), (255, 0, 0), 2)
        roi_np = image_frame[y:y+h, x:x+w]

        # Perform OCR on number plate
        gray_image = cv2.cvtColor(roi_np, cv2.COLOR_BGR2GRAY) 
        psm = 7
        alphanumeric = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        options = "-c tessedit_char_whitelist={}".format(alphanumeric)
        options += " --psm {}".format(psm)
        # initialize the license plate text
        lpText = None
  
        # license plate region
        lp = roi_np
  
        # only OCR the license plate if the license plate ROI is not
        # empty
        if lp is not None:
            # OCR the license plate
            lpText = pytesseract.image_to_string(roi_np, config=options)
            lpText=lpText.strip()
            #print(lpText)
            # Check if license plate matches the specified pattern
            if len(lpText) >= 8:
                if lpText[:2] in ['KL', 'TN', 'KA', 'MH', 'DL', 'TG', 'RJ'] and lpText[6:].isdigit():
                    #print("License Plate:", lpText)
                    if lpText[2] == 'O':
                        lpText = lpText[:2] + '0' + lpText[3:]
                        print("License Plate:", lpText.strip())
                        search_excel_value(excel_file_path, lpText)

                    if lpText[2] == 'Z':
                        lpText = lpText[:2] + '2' + lpText[3:]
                        print("License Plate:", lpText.strip())
                        search_excel_value(excel_file_path, lpText)

                    if lpText[2] == 'S':
                         lpText = lpText[:2] + '5' + lpText[3:]
                         print("License Plate:", lpText.strip())
                         search_excel_value(excel_file_path, lpText)

                    if lpText[2] == 'I':
                        lpText = lpText[:2] + '1' + lpText[3:]
                        print("License Plate:", lpText.strip())
                        search_excel_value(excel_file_path, lpText)

                    if lpText[2] == 'B':
                         lpText = lpText[:2] + '8' + lpText[3:]
                         print("License Plate:", lpText.strip())
                         search_excel_value(excel_file_path, lpText)

                    if lpText[3] == 'O':
                        lpText = lpText[:2] + '0' + lpText[3:]
                        print("License Plate:", lpText.strip())
                        search_excel_value(excel_file_path, lpText)

                    if lpText[3] == 'Z':
                        lpText = lpText[:2] + '2' + lpText[3:]
                        print("License Plate:", lpText.strip())
                        search_excel_value(excel_file_path, lpText)

                    if lpText[3] == 'S':
                         lpText = lpText[:2] + '5' + lpText[3:]
                         print("License Plate:", lpText.strip())
                         search_excel_value(excel_file_path, lpText)

                    if lpText[3] == 'I':
                        lpText = lpText[:2] + '1' + lpText[3:]
                        print("License Plate:", lpText.strip())
                        search_excel_value(excel_file_path, lpText)

                    if lpText[3] == 'B':
                         lpText = lpText[:2] + '8' + lpText[3:]
                         print("License Plate:", lpText.strip())
                         search_excel_value(excel_file_path, lpText)

                    # else:
                    #     print("License Plate:", lpText.strip())
                        
                        
                
                        
                    if lpText[4] == '0':
                         lpText = lpText[:4] + 'O' + lpText[5:]
                         print("License Plate:", lpText.strip())
                         search_excel_value(excel_file_path, lpText)

                    elif lpText[4] == '2':
                         lpText = lpText[:4] + 'Z' + lpText[5:]
                         print("License Plate:", lpText.strip())
                         search_excel_value(excel_file_path, lpText)

                    elif lpText[4] == '5':
                          lpText = lpText[:4] + 'S' + lpText[5:]
                          print("License Plate:", lpText.strip())
                          search_excel_value(excel_file_path, lpText)

                    elif lpText[4] == '1':
                         lpText = lpText[:4] + 'I' + lpText[5:]
                         print("License Plate:", lpText.strip())
                         search_excel_value(excel_file_path, lpText)

                    elif lpText[4] == '8':
                          lpText = lpText[:4] + 'B' + lpText[5:]
                          print("License Plate:", lpText.strip())
                          search_excel_value(excel_file_path, lpText)

                     # if lpText[3] == 'O':
                     #     lpText = lpText[:2] + '0' + lpText[3:]
                     #     print("Modified License Plate:", lpText)
                     # elif lpText[3] == 'Z':
                     #     lpText = lpText[:2] + '2' + lpText[3:]
                     #     print("Modified License Plate:", lpText)
                     # elif lpText[3] == 'S':
                     #      lpText = lpText[:2] + '5' + lpText[3:]
                     #      print("Modified License Plate:", lpText)
                     # elif lpText[3] == 'I':
                     #     lpText = lpText[:2] + '1' + lpText[3:]
                     #     print("Modified License Plate:", lpText)
                     # elif lpText[3] == 'B':
                     #      lpText = lpText[:2] + '8' + lpText[3:]
                     #      print("Modified License Plate:", lpText)
                    else:
                         print("License Plate:", lpText.strip())
                         search_excel_value(excel_file_path, lpText)

            
        '''lpText = pytesseract.image_to_string(roi_np, config=options)
        print("License Plate")
        print(f"License Plate text: {lpText}")'''

        # Perform color recognition
    max_color=detect_car(image_frame)
    # color = recognize_color(car_roi)
   # print("Detected color:", max_color)

    # Display combined frame with number plate detection and color recognition
    #combined_frame = np.hstack((image_frame, image_frame))
    cv2.imshow('Combined Frame', image_frame)

    # Break the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Stop video
vid_cam.release()
cv2.destroyAllWindows()
